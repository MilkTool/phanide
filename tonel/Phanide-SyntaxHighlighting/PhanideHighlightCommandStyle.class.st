"
I am a command used for highlighting a fragment of code by applying a style described in a style table.

I am generated by text highlighters that are based on grammars.
"
Class {
	#name : #PhanideHighlightCommandStyle,
	#superclass : #PhanideHighlightCommand,
	#instVars : [
		'style'
	],
	#category : 'Phanide-SyntaxHighlighting-Commands'
}

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> annotation [
	^ self style: #annotation
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> bar [
	^ self style: #bar
]

{ #category : #'as yet unclassified' }
PhanideHighlightCommandStyle class >> bracket [
	^ self style: #bracket
]

{ #category : #'as yet unclassified' }
PhanideHighlightCommandStyle class >> callBracket [
	^ self style: #callBracket
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> classStyle [
	^ self style: #classStyle
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> commentStyle [
	^ self multiLineComment
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> field [
	^ self style: #field
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> identifier [
	^ self style: #identifier
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> interface [
	^ self style: #interface
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> keyword [
	^ self style: #keyword
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> literalArrayParent [
	^ self style: #keyword
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> localDefinition [
	^ self style: #localDefinition
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> method [
	^ self style: #method
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> methodBracket [
	^ self style: #methodBracket
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> methodDeclaration [
	^ self style: #methodDeclaration
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> methodHeaderSelector [
	^ self style: #methodHeaderSelector
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> multiLineComment [
	^ self style: #multiLineComment
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> number [
	^ self style: #number
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> operator [
	^ self style: #operator
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> packageStyle [
	^ self style: #interface
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> parameterVariable [
	^ self style: #parameterVariable
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> pragma [
	^ self keyword
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> string [
	^ self style: #string
]

{ #category : #accessing }
PhanideHighlightCommandStyle class >> style: aStyleName [
	^ self new style: aStyleName
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> symbol [
	^ self style: #symbol
]

{ #category : #'accessing comment' }
PhanideHighlightCommandStyle class >> typeExpression [
	^ self keyword
]

{ #category : #'as yet unclassified' }
PhanideHighlightCommandStyle >> executeOnSegmentTree: tree withStyleTable: styleTable [
	| attributes |
	attributes := styleTable textAttributesForStyle: style.
	tree from: start to: stop put: attributes
]

{ #category : #accessing }
PhanideHighlightCommandStyle >> style [
	^ style
]

{ #category : #accessing }
PhanideHighlightCommandStyle >> style: anObject [
	style := anObject
]
